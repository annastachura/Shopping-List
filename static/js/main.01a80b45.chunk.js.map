{"version":3,"sources":["Components/Header.js","Components/ShopList.js","Components/AlreadyBought.js","Components/ProductSuggestionList.js","App.js","serviceWorker.js","index.js"],"names":["Header","inputRef","React","createRef","onKeyPress","e","key","onItemAdded","props","current","value","class","placeholder","onKeyDown","this","ref","Component","ShopList","handleItemClicked","item","onItemRemoved","listItems","shoppingList","map","onClick","AlreadyBought","handleMoveBackItem","onItemBack","alreadyBoughtItem","alreadyBoughtList","className","ProductSuggestionList","products","productList","App","addNewItemToShoppingList","setState","prevState","moveItemToAlreadyBought","filter","moveItemBackToShoppingList","state","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NA6BeA,E,4MAzBXC,SAAWC,IAAMC,Y,EAEjBC,WAAa,SAACC,GACV,GAAc,UAAVA,EAAEC,IAAiB,CAAC,IACbC,EAAe,EAAKC,MAApBD,YAC0B,IAA/B,EAAKN,SAASQ,QAAQC,QACxBH,EAAY,EAAKN,SAASQ,QAAQC,OAClC,EAAKT,SAASQ,QAAQC,MAAQ,M,uDASlC,OACI,yBAAKC,MAAQ,UACT,2BAAOC,YAAc,wBAAkBC,UAAaC,KAAKV,WAAWW,IAAOD,KAAKb,SAASU,MAAQ,uB,GAnB5FT,IAAMc,WCmBZC,E,4MAlBXC,kBAAoB,SAACC,IAErBC,EADwB,EAAKZ,MAAtBY,eACOD,I,uDAGJ,IAAD,OAECE,EADiBP,KAAKN,MAArBc,aACwBC,KAAI,SAACJ,GAChC,OAAO,wBAAIK,QAAW,kBAAM,EAAKN,kBAAkBC,IAAMR,MAAQ,kBAAkBQ,MAEvF,OACI,wBAAIR,MAAQ,YACVU,O,GAdSnB,IAAMc,WCwBdS,E,4MArBXC,mBAAqB,SAACP,IAElBQ,EADqB,EAAKnB,MAAnBmB,YACIR,I,uDAIL,IAAD,OAECS,EADsBd,KAAKN,MAA1BqB,kBACqCN,KAAI,SAACJ,GACjD,OAAO,wBAAIK,QAAW,kBAAM,EAAKE,mBAAmBP,IAAOW,UAAY,gBAAgBX,MAEvF,OACI,yBAAKW,UAAY,UACb,wBAAIA,UAAY,gBACXF,Q,GAhBO1B,IAAMc,WCiBnBe,E,4MAfVC,SAAW,CAAC,UAAW,WAAY,UAAW,mB,uDAE3C,IAAMC,EAAcnB,KAAKkB,SAAST,KAAK,SAACJ,GACxC,OAAO,wBAAIR,MAAQ,iBAAiBQ,MAEpC,OACI,yBAAKR,MAAQ,WACT,wBAAIA,MAAQ,iBACPsB,Q,GATe/B,IAAMc,WCyD3BkB,G,wDArDb,WAAY1B,GAAQ,IAAD,8BACjB,cAAMA,IAOR2B,yBAA2B,SAAChB,GAC1B,EAAKiB,UAAS,SAAAC,GAEZ,MAAO,CAAEf,aADY,sBAAOe,EAAUf,cAAjB,CAA+BH,SAVrC,EAenBmB,wBAA0B,SAACnB,GACzB,EAAKiB,UAAS,SAAAC,GAIZ,MAAO,CACLf,aAJsBe,EAAUf,aAAaiB,QAAO,SAAC7B,GACrD,OAAOS,GAAQT,KAIfmB,kBAAkB,GAAD,mBAAMQ,EAAUR,mBAAhB,CAAmCV,SAtBvC,EA2BnBqB,2BAA6B,SAACrB,GAC5B,EAAKiB,UAAS,SAAAC,GAEZ,MAAO,CACLf,aAFmB,sBAAOe,EAAUf,cAAjB,CAA+BH,IAGlDU,kBAAmBQ,EAAUR,kBAAkBU,QAAO,SAAC7B,GACrD,OAAOS,GAAQT,UA/BrB,EAAK+B,MAAQ,CACXnB,aAAc,GACdO,kBAAmB,IAJJ,E,qDAyCT,IAAD,EACqCf,KAAK2B,MAAzCnB,EADD,EACCA,aAAcO,EADf,EACeA,kBACtB,OACE,6BACE,kBAAC,EAAD,CAAQtB,YAAaO,KAAKqB,2BAC1B,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUf,cAAeN,KAAKwB,wBAAyBhB,aAAcA,IACrE,kBAAC,EAAD,CAAeK,WAAYb,KAAK0B,2BAA4BX,kBAAmBA,S,GAjDrE3B,IAAMc,YCKJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.01a80b45.chunk.js","sourcesContent":["import React from \"react\";\n\n\nclass Header extends React.Component {\n    inputRef = React.createRef()\n\n    onKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            const {onItemAdded} = this.props;\n           if(this.inputRef.current.value != \"\") {\n            onItemAdded(this.inputRef.current.value);\n            this.inputRef.current.value = \"\";\n           }\n        }\n\n\n    }\n\n    render () {\n        \n        return (\n            <div class = \"header\">\n                <input placeholder = \"Co chcesz kupić?\"onKeyDown = {this.onKeyPress}ref = {this.inputRef}class = \"header__input\"></input>\n            </div>\n        )\n    }\n}\n\n\nexport default Header;","import React from \"react\";\n\nclass ShopList extends React.Component {\n\n    handleItemClicked = (item) => {\n    const {onItemRemoved} = this.props;\n    onItemRemoved(item);  \n    }\n\n    render() {\n        const {shoppingList} = this.props;\n        const listItems = shoppingList.map((item) => {\n            return <li onClick = {() => this.handleItemClicked(item)}class = \"shoplist__item\">{item}</li>\n        });\n        return (\n            <ul class = \"shoplist\">\n             {listItems}\n            </ul>\n        )\n    }\n}\n\nexport default ShopList;","import React from \"react\";\n\n\nclass AlreadyBought extends React.Component {\n\n    handleMoveBackItem = (item) => {\n        const {onItemBack} = this.props;\n        onItemBack(item);\n        \n\n    }\n    render() {\n        const {alreadyBoughtList} = this.props;\n        const alreadyBoughtItem = alreadyBoughtList.map((item) => {\n        return <li onClick = {() => this.handleMoveBackItem(item)} className = \"bought__item\">{item}</li>\n        })\n        return (\n            <div className = \"bought\">\n                <ul className = \"bought__list\">\n                    {alreadyBoughtItem}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default AlreadyBought;","import React from \"react\";\n\n\n\nclass ProductSuggestionList extends React.Component {\n     products = [\"kapusta\", \"kalafior\", \"pomidor\", \"pomarańcza\"];\n    render () {\n        const productList = this.products.map ((item) => {\n        return <li class = \"product__item\">{item}</li>\n        })\n        return (\n            <div class = \"product\">\n                <ul class = \"product__list\">\n                    {productList}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default ProductSuggestionList;","import React from 'react';\nimport Header from \"./Components/Header\";\nimport ShopList from \"./Components/ShopList\";\nimport AlreadyBought from \"./Components/AlreadyBought\";\nimport ProductSuggestionList from \"./Components/ProductSuggestionList\";\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shoppingList: [],\n      alreadyBoughtList: []\n    }\n  }\n\n  addNewItemToShoppingList = (item) => {\n    this.setState(prevState => {\n      const newShoppingList = [...prevState.shoppingList, item];\n      return { shoppingList: newShoppingList };\n    })\n  }\n\n  moveItemToAlreadyBought = (item) => {\n    this.setState(prevState => {\n      const newShoppingList = prevState.shoppingList.filter((value) => {\n        return item != value;\n      })\n      return {\n        shoppingList: newShoppingList,\n        alreadyBoughtList: [...prevState.alreadyBoughtList, item]\n      };\n    })\n  }\n\n  moveItemBackToShoppingList = (item) => {\n    this.setState(prevState => {\n      const newShoppingList = [...prevState.shoppingList, item];\n      return {\n        shoppingList: newShoppingList,\n        alreadyBoughtList: prevState.alreadyBoughtList.filter((value) => {\n          return item != value;\n        })\n      };\n    })\n  }\n\n\n\n  render() {\n    const { shoppingList, alreadyBoughtList } = this.state;\n    return (\n      <div>\n        <Header onItemAdded={this.addNewItemToShoppingList}></Header>\n        <ProductSuggestionList></ProductSuggestionList>\n        <ShopList onItemRemoved={this.moveItemToAlreadyBought} shoppingList={shoppingList}></ShopList>\n        <AlreadyBought onItemBack={this.moveItemBackToShoppingList} alreadyBoughtList={alreadyBoughtList}></AlreadyBought>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}